								AOP

*AOP（Aspect Oriented Programming） 面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。

	AOP把软件系统分为两个部分：核心关注点和横切关注点。

 	 用途：日志记录，性能统计，安全控制，事务处理，异常处理	

	需要的jar包：aopalliance.jar;aspectjweaver.jar;spring-aop;

*AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：

1)、定义普通业务组件

2)、定义切入点，一个切入点可能横切多个业务组件

3)、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作

所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。

------------------------------------------------------------------------------------------------------------------------------------------------
*AOP核心概念

1)、横切关注点

对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点

2)、切面（aspect）

类是对物体特征的抽象，切面就是对横切关注点的抽象

3)、连接点（joinpoint）

被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器

4)、切入点（pointcut）

对连接点进行拦截的定义

5)、通知（advice）

所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类

6)、目标对象

代理的目标对象

7)、织入（weave）

将切面应用到目标对象并导致代理对象创建的过程

8、引入（introduction）

在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段

--------------------------------------------------------------------------------------------------------------------------------------

*注解

@After	             通知方法会在目标方法返回或抛出异常后调用（最终）
@AfterRetruening     通常方法会在目标方法返回后调用（后置）
@AfterThrowing	     通知方法会在目标方法抛出异常后调用（异常）
@Around	             通知方法将目标方法封装起来（环绕）
@Before	             通知方法会在目标方法执行之前执行（前置）

@Pointcut            声明一个通用的切点，在后面可以随意使用（切点）
@Aspect	             把当前类标识为一个切面供容器读取（切面）


