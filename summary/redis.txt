							Redis

Redis 是一个开源的内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。
我们平时在项目中设计数据访问的时候往往都是采用直接访问数据库，采用数据库连接池来实现，但是如果我们的项目访问量过大或者访问过于频繁，将会对我们的数据库带来很大的压力。为了解决这个问题从而redis数据库脱颖而出，redis数据库出现时是以非关系数据库的光环展示在广大程序猿的面前的，后来redis的迭代版本支持了缓存数据、登录session状态（分布式session共享）等。所以又被作为内存缓存的形式应用到大型企业级项目中。

Redis数据库内有很多个命令,在日常开发中常用到的:
keys *：查看数据库内所有的key。
del [key]：删除一条指定key的值。
flushdb：清空当前数据库。
flushall：清空所有数据库。
select [index]：选择索引数据库，index为索引值名，如：select 1。
quit：退出客户端连接。


						  SpringBoot集成Redis

1.添加redis依赖
	<!--Redis-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

2.配置redis数据库

redis:
    host: 127.0.0.1
    port: 6379
    pool:
      #连接池最大连接数（使用负值表示没有限制）
      max-active: 20
      #连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      #连接池中的最大空闲连接
      max-idle: 20
      #连接池中的最小空闲连接
      min-idle: 0
    #Redis数据库索引（默认为0）
    database: 0

3.配置CacheManager  RedisTemplate
 定义缓存数据key生成策略的bean,key即采用此bean 
 keyGenerator（获取类路径用method.getDeclaringClass().getName()，而不是object.getClass().getName()）


4.@Cacheable(value="city") 这里key不写则key的取值默认为参数的组合，且key必须为String类型，如果ket为int则不行可以采用（1)

1）.自己组装key(value值+方法参数值) 例如： @Cacheable(value = "role",key="'role'.concat(#id)")
					   @Cacheable(value = "role",key="#id.toString()")

2）.（重写）定义key生成策略  @Cacheable(value= "role") 或者@Cacheable(value= "role",keyGenerator = "keyGenerator")








