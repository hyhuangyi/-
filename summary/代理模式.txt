							代理模式

1.什么是代理模式？     代理模式的作用是：为其他对象提供一种代理以控制对这个对象的访问。

2.代理模式有什么好处？  在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。

3.代理模式一般涉及到的角色有：

*抽象角色：声明真实对象和代理对象的共同接口。

*代理角色：代代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。
同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。 

*真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。

---静态代理事实上就是装饰者模式，区别是装饰者模式一般都是传入一个被装饰类在构造器中，而静态代理则是自己创建一个类作为成员变量；

-----------------------------------------------------------------------------------------------------------------------------------------------
							动态代理

*在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。

*每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，
这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。

----------------------------------------------------------invoke方法---------------------------------------------------------------------------

Object invoke(Object proxy, Method method, Object[] args) throws Throwable

proxy:　　指代我们所代理的那个真实对象
method:　　指代的是我们所要调用真实对象的某个方法的Method对象
args:　　指代的是调用真实对象某个方法时接受的参数

------------------------------------------------------ newProxyInstance方法---------------------------------------------------------------------
 
public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException

loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载

interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了

h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上

